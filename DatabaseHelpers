// lib/services/database_service.dart
import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';

class DatabaseService {
  static Database? _database;
  static const String _dbName = 'studypals.db';
  static const int _dbVersion = 1;

  static Future<Database> get database async {
    if (_database != null) return _database!;
    _database = await _initDatabase();
    return _database!;
  }

  static Future<Database> _initDatabase() async {
    final dbPath = await getDatabasesPath();
    final path = join(dbPath, _dbName);

    return await openDatabase(
      path,
      version: _dbVersion,
      onCreate: _onCreate,
      onUpgrade: _onUpgrade,
    );
  }

  static Future<void> _onCreate(Database db, int version) async {
    // Users table
    await db.execute('''
      CREATE TABLE users (
        id TEXT PRIMARY KEY,
        email TEXT UNIQUE NOT NULL,
        name TEXT NOT NULL,
        created_at TEXT NOT NULL,
        study_start_hour INTEGER DEFAULT 9,
        study_end_hour INTEGER DEFAULT 21,
        max_cards_per_day INTEGER DEFAULT 20,
        max_minutes_per_day INTEGER DEFAULT 180
      )
    ''');

    // Tasks table
    await db.execute('''
      CREATE TABLE tasks (
        id TEXT PRIMARY KEY,
        title TEXT NOT NULL,
        est_minutes INTEGER NOT NULL,
        due_at TEXT,
        priority INTEGER DEFAULT 1,
        tags TEXT,
        status TEXT NOT NULL,
        linked_note_id TEXT,
        linked_deck_id TEXT,
        created_at TEXT NOT NULL,
        updated_at TEXT NOT NULL
      )
    ''');

    // Notes table
    await db.execute('''
      CREATE TABLE notes (
        id TEXT PRIMARY KEY,
        title TEXT NOT NULL,
        content_md TEXT NOT NULL,
        tags TEXT,
        created_at TEXT NOT NULL,
        updated_at TEXT NOT NULL
      )
    ''');

    // Decks table
    await db.execute('''
      CREATE TABLE decks (
        id TEXT PRIMARY KEY,
        title TEXT NOT NULL,
        tags TEXT,
        note_id TEXT,
        created_at TEXT NOT NULL,
        updated_at TEXT NOT NULL
      )
    ''');

    // Cards table
    await db.execute('''
      CREATE TABLE cards (
        id TEXT PRIMARY KEY,
        deck_id TEXT NOT NULL,
        type TEXT NOT NULL,
        front TEXT NOT NULL,
        back TEXT NOT NULL,
        cloze_mask TEXT,
        created_at TEXT NOT NULL,
        FOREIGN KEY (deck_id) REFERENCES decks (id) ON DELETE CASCADE
      )
    ''');

    // Reviews table
    await db.execute('''
      CREATE TABLE reviews (
        card_id TEXT PRIMARY KEY,
        user_id TEXT NOT NULL,
        due_at TEXT NOT NULL,
        ease REAL DEFAULT 2.5,
        interval INTEGER DEFAULT 1,
        reps INTEGER DEFAULT 0,
        last_grade TEXT,
        last_reviewed TEXT,
        FOREIGN KEY (card_id) REFERENCES cards (id) ON DELETE CASCADE
      )
    ''');

    // Schedule blocks table
    await db.execute('''
      CREATE TABLE schedule_blocks (
        id TEXT PRIMARY KEY,
        user_id TEXT NOT NULL,
        task_id TEXT,
        start TEXT NOT NULL,
        end TEXT NOT NULL,
        type TEXT NOT NULL,
        created_at TEXT NOT NULL
      )
    ''');

    // Pets table
    await db.execute('''
      CREATE TABLE pets (
        user_id TEXT PRIMARY KEY,
        species TEXT NOT NULL,
        level INTEGER DEFAULT 1,
        xp INTEGER DEFAULT 0,
        gear TEXT,
        mood TEXT DEFAULT 'happy',
        created_at TEXT NOT NULL
      )
    ''');

    // Study streaks table
    await db.execute('''
      CREATE TABLE streaks (
        user_id TEXT PRIMARY KEY,
        current_streak INTEGER DEFAULT 0,
        longest_streak INTEGER DEFAULT 0,
        last_study_date TEXT
      )
    ''');
  }

  static Future<void> _onUpgrade(Database db, int oldVersion, int newVersion) async {
    // Handle database migrations here
  }
}

// lib/repositories/task_repository.dart
class TaskRepository {
  static Future<List<Task>> getAllTasks() async {
    final db = await DatabaseService.database;
    final results = await db.query('tasks', orderBy: 'due_at ASC');
    
    return results.map((json) => Task(
      id: json['id'] as String,
      title: json['title'] as String,
      estMinutes: json['est_minutes'] as int,
      dueAt: json['due_at'] != null 
        ? DateTime.parse(json['due_at'] as String) 
        : null,
      priority: json['priority'] as int,
      tags: (json['tags'] as String?)?.split(',') ?? [],
      status: TaskStatus.values.firstWhere(
        (e) => e.toString() == 'TaskStatus.${json['status']}',
      ),
      linkedNoteId: json['linked_note_id'] as String?,
      linkedDeckId: json['linked_deck_id'] as String?,
    )).toList();
  }

  static Future<void> insertTask(Task task) async {
    final db = await DatabaseService.database;
    await db.insert('tasks', {
      'id': task.id,
      'title': task.title,
      'est_minutes': task.estMinutes,
      'due_at': task.dueAt?.toIso8601String(),
      'priority': task.priority,
      'tags': task.tags.join(','),
      'status': task.status.toString().split('.').last,
      'linked_note_id': task.linkedNoteId,
      'linked_deck_id': task.linkedDeckId,
      'created_at': DateTime.now().toIso8601String(),
      'updated_at': DateTime.now().toIso8601String(),
    });
  }

  static Future<void> updateTask(Task task) async {
    final db = await DatabaseService.database;
    await db.update(
      'tasks',
      {
        'title': task.title,
        'est_minutes': task.estMinutes,
        'due_at': task.dueAt?.toIso8601String(),
        'priority': task.priority,
        'tags': task.tags.join(','),
        'status': task.status.toString().split('.').last,
        'linked_note_id': task.linkedNoteId,
        'linked_deck_id': task.linkedDeckId,
        'updated_at': DateTime.now().toIso8601String(),
      },
      where: 'id = ?',
      whereArgs: [task.id],
    );
  }

  static Future<void> deleteTask(String taskId) async {
    final db = await DatabaseService.database;
    await db.delete('tasks', where: 'id = ?', whereArgs: [taskId]);
  }
}

// lib/widgets/common/add_task_sheet.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:intl/intl.dart';

class AddTaskSheet extends StatefulWidget {
  @override
  _AddTaskSheetState createState() => _AddTaskSheetState();
}

class _AddTaskSheetState extends State<AddTaskSheet> {
  final _formKey = GlobalKey<FormState>();
  final _titleController = TextEditingController();
  final _minutesController = TextEditingController(text: '30');
  DateTime? _selectedDate;
  int _priority = 1;
  List<String> _tags = [];
  final _tagController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: EdgeInsets.only(
        bottom: MediaQuery.of(context).viewInsets.bottom,
      ),
      child: Container(
        padding: EdgeInsets.all(20),
        child: Form(
          key: _formKey,
          child: SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text(
                      'Add Task',
                      style: Theme.of(context).textTheme.headlineSmall,
                    ),
                    IconButton(
                      icon: Icon(Icons.close),
                      onPressed: () => Navigator.pop(context),
                    ),
                  ],
                ),
                SizedBox(height: 20),
                TextFormField(
                  controller: _titleController,
                  decoration: InputDecoration(
                    labelText: 'Task Title',
                    border: OutlineInputBorder(),
                  ),
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Please enter a title';
                    }
                    return null;
                  },
                ),
                SizedBox(height: 16),
                Row(
                  children: [
                    Expanded(
                      child: TextFormField(
                        controller: _minutesController,
                        keyboardType: TextInputType.number,
                        decoration: InputDecoration(
                          labelText: 'Estimated Minutes',
                          border: OutlineInputBorder(),
                        ),
                        validator: (value) {
                          if (value == null || value.isEmpty) {
                            return 'Required';
                          }
                          if (int.tryParse(value) == null) {
                            return 'Invalid number';
                          }
                          return null;
                        },
                      ),
                    ),
                    SizedBox(width: 16),
                    Expanded(
                      child: InkWell(
                        onTap: _selectDate,
                        child: InputDecorator(
                          decoration: InputDecoration(
                            labelText: 'Due Date',
                            border: OutlineInputBorder(),
                          ),
                          child: Row(
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              Text(
                                _selectedDate != null
                                    ? DateFormat('MMM d').format(_selectedDate!)
                                    : 'Select',
                              ),
                              Icon(Icons.calendar_today, size: 20),
                            ],
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
                SizedBox(height: 16),
                Text('Priority', style: TextStyle(fontSize: 16)),
                SizedBox(height: 8),
                SegmentedButton<int>(
                  segments: [
                    ButtonSegment(value: 1, label: Text('Low')),
                    ButtonSegment(value: 2, label: Text('Medium')),
                    ButtonSegment(value: 3, label: Text('High')),
                  ],
                  selected: {_priority},
                  onSelectionChanged: (Set<int> selected) {
                    setState(() {
                      _priority = selected.first;
                    });
                  },
                ),
                SizedBox(height: 16),
                Row(
                  children: [
                    Expanded(
                      child: TextField(
                        controller: _tagController,
                        decoration: InputDecoration(
                          labelText: 'Add Tag',
                          border: OutlineInputBorder(),
                          suffixIcon: IconButton(
                            icon: Icon(Icons.add),
                            onPressed: _addTag,
                          ),
                        ),
                        onSubmitted: (_) => _addTag(),
                      ),
                    ),
                  ],
                ),
                if (_tags.isNotEmpty) ...[
                  SizedBox(height: 8),
                  Wrap(
                    spacing: 8,
                    children: _tags.map((tag) => Chip(
                      label: Text(tag),
                      onDeleted: () {
                        setState(() {
                          _tags.remove(tag);
                        });
                      },
                    )).toList(),
                  ),
                ],
                SizedBox(height: 24),
                SizedBox(
                  width: double.infinity,
                  child: ElevatedButton(
                    onPressed: _saveTask,
                    child: Text('Add Task'),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  void _selectDate() async {
    final picked = await showDatePicker(
      context: context,
      initialDate: _selectedDate ?? DateTime.now(),
      firstDate: DateTime.now(),
      lastDate: DateTime.now().add(Duration(days: 365)),
    );
    
    if (picked != null) {
      setState(() {
        _selectedDate = picked;
      });
    }
  }

  void _addTag() {
    if (_tagController.text.isNotEmpty) {
      setState(() {
        _tags.add(_tagController.text);
        _tagController.clear();
      });
    }
  }

  void _saveTask() {
    if (_formKey.currentState!.validate()) {
      final task = Task(
        id: DateTime.now().millisecondsSinceEpoch.toString(),
        title: _titleController.text,
        estMinutes: int.parse(_minutesController.text),
        dueAt: _selectedDate,
        priority: _priority,
        tags: _tags,
        status: TaskStatus.pending,
      );

      Provider.of<TaskProvider>(context, listen: false).addTask(task);
      Navigator.pop(context);
      
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Task added successfully')),
      );
    }
  }

  @override
  void dispose() {
    _titleController.dispose();
    _minutesController.dispose();
    _tagController.dispose();
    super.dispose();
  }
}

// lib/widgets/common/create_flashcard_sheet.dart
class CreateFlashcardSheet extends StatefulWidget {
  final String selectedText;
  final String? noteId;

  const CreateFlashcardSheet({
    required this.selectedText,
    this.noteId,
  });

  @override
  _CreateFlashcardSheetState createState() => _CreateFlashcardSheetState();
}

class _CreateFlashcardSheetState extends State<CreateFlashcardSheet> {
  final _frontController = TextEditingController();
  final _backController = TextEditingController();
  CardType _cardType = CardType.basic;
  String? _selectedDeckId;
  bool _useAI = false;

  @override
  void initState() {
    super.initState();
    _initializeControllers();
  }

  void _initializeControllers() {
    if (_cardType == CardType.basic) {
      // Generate question from selected text
      _frontController.text = _generateQuestion(widget.selectedText);
      _backController.text = widget.selectedText;
    }
  }

  String _generateQuestion(String text) {
    // Simple rule-based question generation
    // In production, this could use AI
    if (text.length < 50) {
      return 'What is ${text.toLowerCase()}?';
    }
    return 'Explain: ${text.substring(0, 50)}...';
  }

  @override
  Widget build(BuildContext context) {
    final deckProvider = Provider.of<DeckProvider>(context);

    return Container(
      padding: EdgeInsets.only(
        bottom: MediaQuery.of(context).viewInsets.bottom,
      ),
      child: Padding(
        padding: EdgeInsets.all(20),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  'Create Flashcard',
                  style: Theme.of(context).textTheme.headlineSmall,
                ),
                IconButton(
                  icon: Icon(Icons.close),
                  onPressed: () => Navigator.pop(context),
                ),
              ],
            ),
            SizedBox(height: 16),
            DropdownButtonFormField<String>(
              value: _selectedDeckId,
              decoration: InputDecoration(
                labelText: 'Select Deck',
                border: OutlineInputBorder(),
              ),
              items: deckProvider.decks.map((deck) {
                return DropdownMenuItem(
                  value: deck.id,
                  child: Text(deck.title),
                );
              }).toList(),
              onChanged: (value) {
                setState(() {
                  _selectedDeckId = value;
                });
              },
            ),
            SizedBox(height: 16),
            SegmentedButton<CardType>(
              segments: [
                ButtonSegment(value: CardType.basic, label: Text('Q&A')),
                ButtonSegment(value: CardType.cloze, label: Text('Cloze')),
                ButtonSegment(value: CardType.reverse, label: Text('Reverse')),
              ],
              selected: {_cardType},
              onSelectionChanged: (Set<CardType> selected) {
                setState(() {
                  _cardType = selected.first;
                  _initializeControllers();
                });
              },
            ),
            SizedBox(height: 16),
            SwitchListTile(
              title: Text('Use AI to improve'),
              value: _useAI,
              onChanged: (value) {
                setState(() {
                  _useAI = value;
                  if (value) {
                    _improveWithAI();
                  }
                });
              },
            ),
            SizedBox(height: 16),
            TextField(
              controller: _frontController,
              maxLines: 3,
              decoration: InputDecoration(
                labelText: 'Front (Question)',
                border: OutlineInputBorder(),
              ),
            ),
            SizedBox(height: 16),
            TextField(
              controller: _backController,
              maxLines: 3,
              decoration: InputDecoration(
                labelText: 'Back (Answer)',
                border: OutlineInputBorder(),
              ),
            ),
            SizedBox(height: 24),
            Row(
              children: [
                Expanded(
                  child: OutlinedButton(
                    onPressed: _createAndAddAnother,
                    child: Text('Create & Add Another'),
                  ),
                ),
                SizedBox(width: 12),
                Expanded(
                  child: ElevatedButton(
                    onPressed: _createCard,
                    child: Text('Create Card'),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  void _improveWithAI() {
    // Simulate AI improvement
    setState(() {
      _frontController.text = 'AI Enhanced: ${_frontController.text}';
      _backController.text = 'AI Enhanced: ${_backController.text}';
    });
  }

  void _createCard() {
    if (_selectedDeckId == null || 
        _frontController.text.isEmpty || 
        _backController.text.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Please fill all fields')),
      );
      return;
    }

    final card = FlashCard(
      id: DateTime.now().millisecondsSinceEpoch.toString(),
      deckId: _selectedDeckId!,
      type: _cardType,
      front: _frontController.text,
      back: _backController.text,
    );

    Provider.of<DeckProvider>(context, listen: false)
        .addCardToDeck(_selectedDeckId!, card);

    Navigator.pop(context);
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Flashcard created')),
    );
  }

  void _createAndAddAnother() {
    _createCard();
    setState(() {
      _frontController.clear();
      _backController.clear();
    });
  }

  @override
  void dispose() {
    _frontController.dispose();
    _backController.dispose();
    super.dispose();
  }
}

// lib/theme/app_theme.dart
class AppTheme {
  static ThemeData get lightTheme {
    return ThemeData(
      useMaterial3: true,
      colorScheme: ColorScheme.fromSeed(
        seedColor: Colors.blue,
        brightness: Brightness.light,
      ),
      navigationBarTheme: NavigationBarThemeData(
        indicatorColor: Colors.blue.withOpacity(0.2),
      ),
      cardTheme: CardTheme(
        elevation: 2,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(12),
        ),
      ),
      inputDecorationTheme: InputDecorationTheme(
        filled: true,
        fillColor: Colors.grey.withOpacity(0.1),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(8),
          borderSide: BorderSide.none,
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(8),
          borderSide: BorderSide.none,
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(8),
          borderSide: BorderSide(color: Colors.blue, width: 2),
        ),
      ),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          padding: EdgeInsets.symmetric(horizontal: 24, vertical: 12),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(8),
          ),
        ),
      ),
    );
  }

  static ThemeData get darkTheme {
    return ThemeData(
      useMaterial3: true,
      colorScheme: ColorScheme.fromSeed(
        seedColor: Colors.blue,
        brightness: Brightness.dark,
      ),
      navigationBarTheme: NavigationBarThemeData(
        indicatorColor: Colors.blue.withOpacity(0.3),
      ),
      cardTheme: CardTheme(
        elevation: 2,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(12),
        ),
      ),
      inputDecorationTheme: InputDecorationTheme(
        filled: true,
        fillColor: Colors.grey.withOpacity(0.1),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(8),
          borderSide: BorderSide.none,
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(8),
          borderSide: BorderSide.none,
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(8),
          borderSide: BorderSide(color: Colors.blue, width: 2),
        ),
      ),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          padding: EdgeInsets.symmetric(horizontal: 24, vertical: 12),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(8),
          ),
        ),
      ),
    );
  }
}
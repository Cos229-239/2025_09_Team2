import 'package:flutter/material.dart';
import 'dart:async';
import 'package:image_picker/image_picker.dart';
import 'package:file_picker/file_picker.dart';
import 'package:emoji_picker_flutter/emoji_picker_flutter.dart';
import 'package:cached_network_image/cached_network_image.dart';
import '../services/social_learning_service.dart';
import '../services/gif_service.dart';

/// Real-time chat screen with Discord-like features (reactions, GIFs, attachments)
class ChatScreen extends StatefulWidget {
  final UserProfile otherUser;
  final SocialLearningService socialService;

  const ChatScreen({
    super.key,
    required this.otherUser,
    required this.socialService,
  });

  @override
  State<ChatScreen> createState() => _ChatScreenState();
}

class _ChatScreenState extends State<ChatScreen> {
  final TextEditingController _messageController = TextEditingController();
  final ScrollController _scrollController = ScrollController();
  final GifService _gifService = GifService();
  final ImagePicker _imagePicker = ImagePicker();
  
  Timer? _typingTimer;
  bool _isCurrentlyTyping = false;
  bool _showEmojiPicker = false;
  bool _isUploading = false;
  double _uploadProgress = 0.0;

  @override
  void initState() {
    super.initState();
    _markMessagesAsRead();
  }

  @override
  void dispose() {
    _typingTimer?.cancel();
    // Clear typing status when leaving chat
    if (_isCurrentlyTyping) {
      widget.socialService.updateTypingStatus(
        recipientId: widget.otherUser.id,
        isTyping: false,
      );
    }
    _messageController.dispose();
    _scrollController.dispose();
    super.dispose();
  }

  void _markMessagesAsRead() {
    // Mark messages as read when opening chat
    widget.socialService.markMessagesAsRead(widget.otherUser.id);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Row(
          children: [
            CircleAvatar(
              radius: 20,
              backgroundColor:
                  Theme.of(context).colorScheme.primary.withValues(alpha: 0.1),
              backgroundImage: widget.otherUser.avatar != null
                  ? NetworkImage(widget.otherUser.avatar!)
                  : null,
              child: widget.otherUser.avatar == null
                  ? Text(
                      widget.otherUser.displayName.isNotEmpty
                          ? widget.otherUser.displayName[0].toUpperCase()
                          : widget.otherUser.username[0].toUpperCase(),
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                        color: Theme.of(context).colorScheme.primary,
                      ),
                    )
                  : null,
            ),
            const SizedBox(width: 12),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    widget.otherUser.displayName,
                    style: const TextStyle(
                        fontSize: 16, fontWeight: FontWeight.bold),
                  ),
                  // Real-time typing status
                  StreamBuilder<bool>(
                    stream: widget.socialService.listenToTypingStatus(widget.otherUser.id),
                    builder: (context, snapshot) {
                      final isTyping = snapshot.data ?? false;
                      
                      if (isTyping) {
                        return Text(
                          'typing...',
                          style: TextStyle(
                            fontSize: 12,
                            color: Theme.of(context).colorScheme.primary,
                            fontStyle: FontStyle.italic,
                          ),
                        );
                      }
                      
                      return Text(
                        widget.otherUser.isOnline ? 'Online' : 'Offline',
                        style: TextStyle(
                          fontSize: 12,
                          color: widget.otherUser.isOnline
                              ? Colors.green
                              : Colors.grey,
                        ),
                      );
                    },
                  ),
                ],
              ),
            ),
          ],
        ),
        actions: [
          IconButton(
            onPressed: _showChatOptions,
            icon: const Icon(Icons.more_vert),
          ),
        ],
      ),
      body: Column(
        children: [
          // Messages List (Real-time from Firestore)
          Expanded(
            child: StreamBuilder<List<Map<String, dynamic>>>(
              stream: widget.socialService.listenToMessages(widget.otherUser.id),
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return const Center(
                    child: CircularProgressIndicator(),
                  );
                }
                
                if (snapshot.hasError) {
                  return Center(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Icon(
                          Icons.error_outline,
                          size: 48,
                          color: Colors.red[300],
                        ),
                        const SizedBox(height: 16),
                        Text(
                          'Error loading messages',
                          style: TextStyle(color: Colors.red[300]),
                        ),
                        const SizedBox(height: 8),
                        TextButton(
                          onPressed: () => setState(() {}),
                          child: const Text('Retry'),
                        ),
                      ],
                    ),
                  );
                }
                
                final messages = snapshot.data ?? [];
                
                if (messages.isEmpty) {
                  return Center(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Icon(
                          Icons.chat_bubble_outline,
                          size: 64,
                          color: Colors.grey[400],
                        ),
                        const SizedBox(height: 16),
                        Text(
                          'No messages yet',
                          style: TextStyle(
                            fontSize: 18,
                            color: Colors.grey[600],
                          ),
                        ),
                        const SizedBox(height: 8),
                        Text(
                          'Send a message to start chatting!',
                          style: TextStyle(
                            fontSize: 14,
                            color: Colors.grey[500],
                          ),
                        ),
                      ],
                    ),
                  );
                }
                
                // Auto-scroll to bottom when new messages arrive
                WidgetsBinding.instance.addPostFrameCallback((_) {
                  if (_scrollController.hasClients) {
                    _scrollController.animateTo(
                      _scrollController.position.maxScrollExtent,
                      duration: const Duration(milliseconds: 300),
                      curve: Curves.easeOut,
                    );
                  }
                });
                
                return ListView.builder(
                  controller: _scrollController,
                  padding: const EdgeInsets.all(16),
                  itemCount: messages.length,
                  itemBuilder: (context, index) {
                    final message = messages[index];
                    return _buildMessageBubbleWithReactions(message);
                  },
                );
              },
            ),
          ),
          
          // Upload Progress Indicator
          if (_isUploading)
            Container(
              padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
              color: Theme.of(context).colorScheme.surfaceVariant,
              child: Row(
                children: [
                  SizedBox(
                    width: 20,
                    height: 20,
                    child: CircularProgressIndicator(
                      value: _uploadProgress / 100,
                      strokeWidth: 2,
                    ),
                  ),
                  const SizedBox(width: 12),
                  Text(
                    'Uploading... ${_uploadProgress.toStringAsFixed(0)}%',
                    style: const TextStyle(fontSize: 14),
                  ),
                ],
              ),
            ),
          
          // Discord-like Message Input Bar
          Container(
            decoration: BoxDecoration(
              color: Theme.of(context).scaffoldBackgroundColor,
              border: Border(
                top: BorderSide(
                  color: Theme.of(context).dividerColor,
                  width: 1,
                ),
              ),
            ),
            padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 8),
            child: Row(
              crossAxisAlignment: CrossAxisAlignment.end,
              children: [
                // Attachment Button
                IconButton(
                  onPressed: _showAttachmentOptions,
                  icon: const Icon(Icons.add_circle_outline),
                  tooltip: 'Add attachment',
                  color: Theme.of(context).colorScheme.primary,
                ),
                
                // Text Input
                Expanded(
                  child: Container(
                    constraints: const BoxConstraints(maxHeight: 120),
                    child: TextField(
                      controller: _messageController,
                      onChanged: _handleTyping,
                      maxLines: null,
                      textCapitalization: TextCapitalization.sentences,
                      decoration: InputDecoration(
                        hintText: 'Message @${widget.otherUser.username}',
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(24),
                          borderSide: BorderSide.none,
                        ),
                        filled: true,
                        fillColor: Theme.of(context).colorScheme.surfaceVariant,
                        contentPadding: const EdgeInsets.symmetric(
                          horizontal: 16,
                          vertical: 12,
                        ),
                      ),
                    ),
                  ),
                ),
                
                const SizedBox(width: 8),
                
                // GIF Button
                IconButton(
                  onPressed: _showGifPicker,
                  icon: const Icon(Icons.gif_box_outlined),
                  tooltip: 'Send GIF',
                  color: Theme.of(context).colorScheme.primary,
                ),
                
                // Emoji Button
                IconButton(
                  onPressed: () {
                    setState(() {
                      _showEmojiPicker = !_showEmojiPicker;
                    });
                  },
                  icon: Icon(
                    _showEmojiPicker ? Icons.keyboard : Icons.emoji_emotions_outlined,
                  ),
                  tooltip: 'Emoji',
                  color: Theme.of(context).colorScheme.primary,
                ),
                
                // Send Button
                IconButton(
                  onPressed: _canSendMessage ? _sendMessage : null,
                  icon: const Icon(Icons.send),
                  tooltip: 'Send',
                  color: _canSendMessage 
                    ? Theme.of(context).colorScheme.primary 
                    : null,
                ),
              ],
            ),
          ),
          
          // Emoji Picker
          if (_showEmojiPicker)
            SizedBox(
              height: 250,
              child: EmojiPicker(
                onEmojiSelected: (category, emoji) {
                  _messageController.text += emoji.emoji;
                },
                config: const Config(),
              ),
            ),
        ],
      ),
    );
  }

  Widget _buildMessageBubbleWithReactions(Map<String, dynamic> message) {
    final isMe = message['isMe'] as bool;
    final messageText = message['message'] as String? ?? '';
    final timestamp = message['timestamp'] as DateTime;
    final messageId = message['id'] as String;
    
    // Attachment data
    final attachmentUrl = message['attachmentUrl'] as String?;
    final attachmentType = message['attachmentType'] as String?;
    final attachmentName = message['attachmentName'] as String?;
    
    // Reactions data
    final reactions = message['reactions'] as Map<String, dynamic>? ?? {};
    
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        mainAxisAlignment:
            isMe ? MainAxisAlignment.end : MainAxisAlignment.start,
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          if (!isMe) ...[
            CircleAvatar(
              radius: 16,
              backgroundColor:
                  Theme.of(context).colorScheme.primary.withValues(alpha: 0.1),
              backgroundImage: widget.otherUser.avatar != null
                  ? NetworkImage(widget.otherUser.avatar!)
                  : null,
              child: widget.otherUser.avatar == null
                  ? Text(
                      widget.otherUser.displayName.isNotEmpty
                          ? widget.otherUser.displayName[0].toUpperCase()
                          : widget.otherUser.username[0].toUpperCase(),
                      style: TextStyle(
                        fontSize: 14,
                        fontWeight: FontWeight.bold,
                        color: Theme.of(context).colorScheme.primary,
                      ),
                    )
                  : null,
            ),
            const SizedBox(width: 8),
          ],
          
          // Message Content + Reactions
          Flexible(
            child: Column(
              crossAxisAlignment:
                  isMe ? CrossAxisAlignment.end : CrossAxisAlignment.start,
              children: [
                // Message Bubble
                GestureDetector(
                  onLongPress: () => _showReactionPicker(messageId, isMe),
                  child: Container(
                    padding: const EdgeInsets.symmetric(
                      horizontal: 16,
                      vertical: 10,
                    ),
                    decoration: BoxDecoration(
                      color: isMe
                          ? Theme.of(context).colorScheme.primary
                          : Theme.of(context).colorScheme.surfaceVariant,
                      borderRadius: BorderRadius.only(
                        topLeft: const Radius.circular(18),
                        topRight: const Radius.circular(18),
                        bottomLeft: Radius.circular(isMe ? 18 : 4),
                        bottomRight: Radius.circular(isMe ? 4 : 18),
                      ),
                    ),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        // Attachment (if present)
                        if (attachmentUrl != null) ...[
                          _buildAttachment(attachmentUrl, attachmentType, attachmentName),
                          if (messageText.isNotEmpty) const SizedBox(height: 8),
                        ],
                        
                        // Text Message
                        if (messageText.isNotEmpty)
                          Text(
                            messageText,
                            style: TextStyle(
                              fontSize: 15,
                              color: isMe
                                  ? Colors.white
                                  : Theme.of(context).colorScheme.onSurface,
                            ),
                          ),
                        
                        const SizedBox(height: 4),
                        
                        // Timestamp
                        Text(
                          _formatTimestamp(timestamp),
                          style: TextStyle(
                            fontSize: 11,
                            color: isMe
                                ? Colors.white70
                                : Theme.of(context)
                                    .colorScheme
                                    .onSurface
                                    .withValues(alpha: 0.6),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
                
                // Reactions Display
                if (reactions.isNotEmpty)
                  Padding(
                    padding: const EdgeInsets.only(top: 4),
                    child: Wrap(
                      spacing: 4,
                      runSpacing: 4,
                      children: reactions.entries.map((entry) {
                        final emoji = entry.key;
                        final userIds = List<String>.from(entry.value as List);
                        final currentUserId = widget.socialService.currentUserId;
                        final hasReacted = currentUserId != null && userIds.contains(currentUserId);
                        
                        return GestureDetector(
                          onTap: () async {
                            if (hasReacted) {
                              await widget.socialService.removeReaction(
                                otherUserId: widget.otherUser.id,
                                messageId: messageId,
                                emoji: emoji,
                              );
                            } else {
                              await widget.socialService.addReaction(
                                otherUserId: widget.otherUser.id,
                                messageId: messageId,
                                emoji: emoji,
                              );
                            }
                          },
                          child: Container(
                            padding: const EdgeInsets.symmetric(
                              horizontal: 8,
                              vertical: 4,
                            ),
                            decoration: BoxDecoration(
                              color: hasReacted
                                  ? Theme.of(context).colorScheme.primary.withValues(alpha: 0.2)
                                  : Theme.of(context).colorScheme.surfaceVariant,
                              border: hasReacted
                                  ? Border.all(
                                      color: Theme.of(context).colorScheme.primary,
                                      width: 1.5,
                                    )
                                  : null,
                              borderRadius: BorderRadius.circular(12),
                            ),
                            child: Row(
                              mainAxisSize: MainAxisSize.min,
                              children: [
                                Text(
                                  emoji,
                                  style: const TextStyle(fontSize: 14),
                                ),
                                const SizedBox(width: 4),
                                Text(
                                  '${userIds.length}',
                                  style: TextStyle(
                                    fontSize: 12,
                                    fontWeight: FontWeight.bold,
                                    color: hasReacted
                                        ? Theme.of(context).colorScheme.primary
                                        : Theme.of(context).colorScheme.onSurface,
                                  ),
                                ),
                              ],
                            ),
                          ),
                        );
                      }).toList(),
                    ),
                  ),
              ],
            ),
          ),
          
          if (isMe) const SizedBox(width: 8),
        ],
      ),
    );
  }
  
  Widget _buildAttachment(String url, String? type, String? name) {
    switch (type) {
      case 'image':
        return ClipRRect(
          borderRadius: BorderRadius.circular(8),
          child: CachedNetworkImage(
            imageUrl: url,
            width: 250,
            fit: BoxFit.cover,
            placeholder: (context, url) => Container(
              width: 250,
              height: 150,
              color: Colors.grey[300],
              child: const Center(
                child: CircularProgressIndicator(),
              ),
            ),
            errorWidget: (context, url, error) => Container(
              width: 250,
              height: 150,
              color: Colors.grey[300],
              child: const Icon(Icons.broken_image, size: 48),
            ),
          ),
        );
        
      case 'gif':
        return ClipRRect(
          borderRadius: BorderRadius.circular(8),
          child: CachedNetworkImage(
            imageUrl: url,
            width: 250,
            fit: BoxFit.cover,
          ),
        );
        
      case 'sticker':
        return Image.network(
          url,
          width: 160,
          height: 160,
          fit: BoxFit.contain,
        );
        
      case 'file':
      default:
        return Container(
          padding: const EdgeInsets.all(12),
          decoration: BoxDecoration(
            color: Colors.grey[200],
            borderRadius: BorderRadius.circular(8),
          ),
          child: Row(
            mainAxisSize: MainAxisSize.min,
            children: [
              const Icon(Icons.insert_drive_file, size: 32),
              const SizedBox(width: 12),
              Flexible(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      name ?? 'File',
                      style: const TextStyle(
                        fontSize: 14,
                        fontWeight: FontWeight.w500,
                      ),
                      overflow: TextOverflow.ellipsis,
                    ),
                    TextButton(
                      onPressed: () {
                        // TODO: Open file in browser
                      },
                      child: const Text('Download'),
                    ),
                  ],
                ),
              ),
            ],
          ),
        );
    }
  }
  
  bool get _canSendMessage {
    return _messageController.text.trim().isNotEmpty && !_isUploading;
  }
  
  void _showReactionPicker(String messageId, bool isMyMessage) {
    showModalBottomSheet(
      context: context,
      backgroundColor: Theme.of(context).scaffoldBackgroundColor,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      builder: (context) => Container(
        height: 300,
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              'React to message',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 16),
            Expanded(
              child: EmojiPicker(
                onEmojiSelected: (category, emoji) async {
                  await widget.socialService.addReaction(
                    otherUserId: widget.otherUser.id,
                    messageId: messageId,
                    emoji: emoji.emoji,
                  );
                  if (mounted) Navigator.pop(context);
                },
                config: const Config(),
              ),
            ),
          ],
        ),
      ),
    );
  }
  
  void _showAttachmentOptions() {
    showModalBottomSheet(
      context: context,
      backgroundColor: Theme.of(context).scaffoldBackgroundColor,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      builder: (context) => Container(
        padding: const EdgeInsets.all(16),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            ListTile(
              leading: const Icon(Icons.photo_library),
              title: const Text('Photo from Gallery'),
              onTap: () {
                Navigator.pop(context);
                _pickImage(ImageSource.gallery);
              },
            ),
            ListTile(
              leading: const Icon(Icons.camera_alt),
              title: const Text('Take Photo'),
              onTap: () {
                Navigator.pop(context);
                _pickImage(ImageSource.camera);
              },
            ),
            ListTile(
              leading: const Icon(Icons.insert_drive_file),
              title: const Text('Upload File'),
              onTap: () {
                Navigator.pop(context);
                _pickFile();
              },
            ),
          ],
        ),
      ),
    );
  }
  
  Future<void> _pickImage(ImageSource source) async {
    try {
      final XFile? image = await _imagePicker.pickImage(source: source);
      if (image == null) return;
      
      setState(() {
        _isUploading = true;
        _uploadProgress = 0.0;
      });
      
      final result = await widget.socialService.uploadAttachment(
        filePath: image.path,
        fileName: image.name,
        fileType: 'image',
        recipientId: widget.otherUser.id,
        onProgress: (progress) {
          setState(() {
            _uploadProgress = progress;
          });
        },
      );
      
      await widget.socialService.sendEnhancedMessage(
        recipientId: widget.otherUser.id,
        attachmentUrl: result['url'],
        attachmentType: result['type'],
        attachmentName: result['name'],
        attachmentSize: result['size'],
      );
      
      setState(() {
        _isUploading = false;
        _uploadProgress = 0.0;
      });
    } catch (e) {
      setState(() {
        _isUploading = false;
        _uploadProgress = 0.0;
      });
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to upload image: $e')),
        );
      }
    }
  }
  
  Future<void> _pickFile() async {
    try {
      final result = await FilePicker.platform.pickFiles();
      if (result == null) return;
      
      final file = result.files.first;
      if (file.path == null) return;
      
      setState(() {
        _isUploading = true;
        _uploadProgress = 0.0;
      });
      
      final uploadResult = await widget.socialService.uploadAttachment(
        filePath: file.path!,
        fileName: file.name,
        fileType: 'file',
        recipientId: widget.otherUser.id,
        onProgress: (progress) {
          setState(() {
            _uploadProgress = progress;
          });
        },
      );
      
      await widget.socialService.sendEnhancedMessage(
        recipientId: widget.otherUser.id,
        attachmentUrl: uploadResult['url'],
        attachmentType: uploadResult['type'],
        attachmentName: uploadResult['name'],
        attachmentSize: uploadResult['size'],
      );
      
      setState(() {
        _isUploading = false;
        _uploadProgress = 0.0;
      });
    } catch (e) {
      setState(() {
        _isUploading = false;
        _uploadProgress = 0.0;
      });
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to upload file: $e')),
        );
      }
    }
  }
  
  void _showGifPicker() async {
    final gif = await showModalBottomSheet<String>(
      context: context,
      backgroundColor: Theme.of(context).scaffoldBackgroundColor,
      isScrollControlled: true,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      builder: (context) => _GifPickerModal(gifService: _gifService),
    );
    
    if (gif != null) {
      await widget.socialService.sendEnhancedMessage(
        recipientId: widget.otherUser.id,
        attachmentUrl: gif,
        attachmentType: 'gif',
      );
    }
  }
  
  void _sendMessage() async {
    final text = _messageController.text.trim();
    if (text.isEmpty) return;
    
    // Clear input immediately
    _messageController.clear();
    
    try {
      await widget.socialService.sendEnhancedMessage(
        recipientId: widget.otherUser.id,
        messageText: text,
      );
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to send message: $e')),
        );
      }
    }
  }

  void _handleTyping(String text) {
    // Update typing status (Discord-like debouncing)
    if (text.isNotEmpty) {
      if (!_isCurrentlyTyping) {
        _isCurrentlyTyping = true;
        widget.socialService.updateTypingStatus(
          recipientId: widget.otherUser.id,
          isTyping: true,
        );
      }
      
      // Reset typing timer
      _typingTimer?.cancel();
      _typingTimer = Timer(const Duration(seconds: 2), () {
        _isCurrentlyTyping = false;
        widget.socialService.updateTypingStatus(
          recipientId: widget.otherUser.id,
          isTyping: false,
        );
      });
    } else if (_isCurrentlyTyping) {
      _isCurrentlyTyping = false;
      widget.socialService.updateTypingStatus(
        recipientId: widget.otherUser.id,
        isTyping: false,
      );
    }
  }

  String _formatTimestamp(DateTime timestamp) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Theme.of(context).colorScheme.surface,
        border: Border(
          top: BorderSide(
            color: Theme.of(context).colorScheme.outline.withValues(alpha: 0.2),
          ),
        ),
      ),
      child: SafeArea(
        child: Row(
          children: [
            Expanded(
              child: TextField(
                controller: _messageController,
                decoration: InputDecoration(
                  hintText: 'Message @${widget.otherUser.username}',
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(25),
                    borderSide: BorderSide.none,
                  ),
                  filled: true,
                  fillColor: Theme.of(context).colorScheme.surfaceContainerHighest,
                  contentPadding: const EdgeInsets.symmetric(
                    horizontal: 16,
                    vertical: 8,
                  ),
                ),
                textInputAction: TextInputAction.send,
                onSubmitted: (_) => _sendMessage(),
                onChanged: _onMessageChanged,
                minLines: 1,
                maxLines: 5,
              ),
            ),
            const SizedBox(width: 8),
            IconButton(
              onPressed:
                  _messageController.text.trim().isEmpty ? null : _sendMessage,
              icon: Icon(
                Icons.send,
                color: _messageController.text.trim().isEmpty
                    ? Theme.of(context)
                        .colorScheme
                        .onSurface
                        .withValues(alpha: 0.4)
                    : Theme.of(context).colorScheme.primary,
              ),
              tooltip: 'Send',
            ),
          ],
        ),
      ),
    );
  }

  void _onMessageChanged(String text) {
    // Update typing status (Discord-like debouncing)
    if (text.isNotEmpty) {
      if (!_isCurrentlyTyping) {
        _isCurrentlyTyping = true;
        widget.socialService.updateTypingStatus(
          recipientId: widget.otherUser.id,
          isTyping: true,
        );
      }
      
      // Reset typing timer
      _typingTimer?.cancel();
      _typingTimer = Timer(const Duration(seconds: 3), () {
        if (_isCurrentlyTyping) {
          _isCurrentlyTyping = false;
          widget.socialService.updateTypingStatus(
            recipientId: widget.otherUser.id,
            isTyping: false,
          );
        }
      });
    } else {
      // Clear typing immediately when text is empty
      _typingTimer?.cancel();
      if (_isCurrentlyTyping) {
        _isCurrentlyTyping = false;
        widget.socialService.updateTypingStatus(
          recipientId: widget.otherUser.id,
          isTyping: false,
        );
      }
    }
  }

  void _sendMessage() async {
    final messageText = _messageController.text.trim();
    if (messageText.isEmpty) return;

    // Clear input immediately (Discord-like UX)
    _messageController.clear();
    
    // Clear typing status
    _typingTimer?.cancel();
    _isCurrentlyTyping = false;

    // Send message to Firestore
    await widget.socialService.sendMessage(
      recipientId: widget.otherUser.id,
      messageText: messageText,
    );
  }

  String _formatTimestamp(DateTime timestamp) {
    final now = DateTime.now();
    final difference = now.difference(timestamp);

    if (difference.inMinutes < 1) {
      return 'Now';
    } else if (difference.inHours < 1) {
      return '${difference.inMinutes}m ago';
    } else if (difference.inDays < 1) {
      return '${difference.inHours}h ago';
    } else if (difference.inDays < 7) {
      return '${difference.inDays}d ago';
    } else {
      return '${timestamp.month}/${timestamp.day}/${timestamp.year}';
    }
  }

  void _showChatOptions() {
    showModalBottomSheet(
      context: context,
      builder: (context) => SafeArea(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            ListTile(
              leading: const Icon(Icons.person),
              title: Text('View ${widget.otherUser.displayName}\'s Profile'),
              onTap: () {
                Navigator.pop(context);
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('Profile view - Coming soon!')),
                );
              },
            ),
            ListTile(
              leading: const Icon(Icons.notifications_off),
              title: const Text('Mute Conversation'),
              onTap: () {
                Navigator.pop(context);
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('Mute - Coming soon!')),
                );
              },
            ),
            ListTile(
              leading: const Icon(Icons.delete, color: Colors.red),
              title: const Text('Clear Chat History', style: TextStyle(color: Colors.red)),
              onTap: () {
                Navigator.pop(context);
                _confirmClearChat();
              },
            ),
          ],
        ),
      ),
    );
  }

  void _confirmClearChat() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Clear Chat History'),
        content: const Text(
          'This will delete all messages in this conversation. This cannot be undone.',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancel'),
          ),
          FilledButton(
            onPressed: () {
              Navigator.pop(context);
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text('Clear chat - Coming soon!')),
              );
            },
            style: FilledButton.styleFrom(
              backgroundColor: Theme.of(context).colorScheme.error,
            ),
            child: const Text('Clear'),
          ),
        ],
      ),
    );
  }
}
